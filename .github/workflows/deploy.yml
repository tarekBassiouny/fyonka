name: Build, Test and Deploy

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build Backend & Frontend
    runs-on: ubuntu-latest
    outputs:
      composer-cache: ${{ steps.composer-cache.outputs.cache-hit }}
      node-cache: ${{ steps.node-cache.outputs.cache-hit }}
    steps:
      - name: Checkout latest code
        uses: actions/checkout@v3

      - name: Cache Composer dependencies
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Cache NPM dependencies
        id: node-cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Composer dependencies
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -w /app \
            php:8.2-cli \
            bash -c "apt update && apt install -y unzip git libzip-dev libpng-dev libjpeg-dev libfreetype6-dev \
            && docker-php-ext-configure gd --with-freetype --with-jpeg \
            && docker-php-ext-install zip gd \
            && curl -sS https://getcomposer.org/installer | php \
            && php composer.phar install --no-dev --optimize-autoloader"

      - name: Install & Build Frontend
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -w /app \
            node:20 \
            bash -c "npm ci && npm run build"

  test:
    name: Run PHPUnit Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout latest code
        uses: actions/checkout@v3

      - name: Restore Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}

      - name: Install Composer dependencies
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -w /app \
            php:8.2-cli \
            bash -c "curl -sS https://getcomposer.org/installer | php && php composer.phar install --no-dev --optimize-autoloader"

      - name: Run tests
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -w /app \
            php:8.2-cli \
            php vendor/bin/phpunit

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout latest code
        uses: actions/checkout@v3

      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY }}

      - name: Deploy to server via SSH
        run: |
          ssh -o StrictHostKeyChecking=no ${{ vars.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << EOF
            cd ${{ vars.DEPLOY_PATH }}
            export APP_KEY=${{ secrets.APP_KEY }}
            export APP_URL=${{ vars.APP_URL }}
            export DB_DATABASE=${{ vars.DB_DATABASE }}
            export DB_USERNAME=${{ vars.DB_USERNAME }}
            export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            export DEFAULT_ADMIN_PASSWORD=${{ secrets.DEFAULT_ADMIN_PASSWORD }}
            export DEFAULT_API_PASSWORD=${{ secrets.DEFAULT_API_PASSWORD }}
            bash ./setup-env.sh
            chmod +x deploy.sh
            bash ./deploy.sh
          EOF
